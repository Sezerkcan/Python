# Görev -1 : Verilen değerlerin veri yapılarını inceleyiniz

x = 8
y = 3.2
z = 8j + 18
a = "Hello World"
b = True
c = 23 < 22
l = [1, 2, 3, 4]
d = {"Name": "Jake",
     "Age": 27,
     "Adress": "Downtown"}
t = ("Machine Learning", "Data Science")
s = {"Python", "Machine Learning", "Data Science"}

type(x)
type(y)
type(z)
type(a)
type(b)
type(c)
type(l)
type(d)
type(t)
type(s)

# Görev - 2 : Verilen string ifadenin tüm harflerini büyük harfe çeviriniz. Virgül ve nokta yerine space koyunuz,
# kelime kelime ayırınız.
# text = "The goal is the to turn data into information, and information into insight."
# Beklenen çıktı : ['THE', 'GOAL', 'IS', 'THE', 'TO', 'TURN', 'DATA', 'INTO', 'INFORMATION', 'AND', 'INFORMATION', 'INTO', 'INSIGHT']

text = "The goal is the to turn data into information, and information into insight."

new_text = text.upper()
new_text = new_text.replace(".", " ").replace(",", " ")
new_text = new_text.split()


print(new_text, end= " ")

# Görev - 3 : Verilen listeye aşağıdaki adımları uygulayınız.

# lst = ["D", "A", "T", "A", "S", "C", "I", "E", "N", "C", "E"]
""" 
Adım 1: Verilen listenin eleman sayısına bakınız.
Adım 2: Sıfırıncı ve onuncu indeksteki elemanları çağırınız.
Adım 3: Verilen liste üzerinden ["D", "A", "T", "A"] listesi oluşturunuz.
Adım 4: Sekizinci indeksteki elemanı siliniz.
Adım 5: Yeni bir eleman ekleyiniz.
Adım 6: Sekizinci indekse "N" elemanını tekrar ekleyiniz.

"""

lst = ["D", "A", "T", "A", "S", "C", "I", "E", "N", "C", "E"]

len(lst)
print(lst[0], lst[10])
lst[0:4]
lst.pop(8)
lst.append("K")
lst.insert(8, "N")

lst

# Görev 4 : Verilen sözlük yapısına aşağıdaki adımları uygulayınız.
"""
Adım 1: Key değerlerine erişiniz.
Adım 2: Value'lara erişiniz.
Adım 3: Daisy key'ine ait 12 değerini 13 olarak güncelleyiniz.
Adım 4: Key değeri Ahmet value değeri [Turkey,24] olan yeni bir değer ekleyiniz.
Adım 5: Antonio'yu dictionary'den siliniz.
 
"""

dict = {'Christian': ["America", 18],
        'Daisy': ["England", 12],
        'Antonio': ["Spain", 22],
        'Dante' : ["Italy", 25]}

dict.keys()
dict.values()
dict["Daisy"] = ["England", 13]
dict["Daisy"]

dict.update({"Ahmet": ["Turkey", 24]})
dict

dir(dict)
dict.pop("Antonio")
dict

# Görev - 5 :Argüman olarak bir liste alan, listenin içerisindeki tek ve çift sayıları ayrı listelere atayan ve bu listeleri
# return eden fonksiyon yazınız.

l = [2, 13, 18, 93, 22]

def func(l):
    odd_list = list()
    even_list = list()
    for element in l:
        if element % 2 == 0:
            even_list.append(element)
        else:
            odd_list.append(element)
    return even_list, odd_list

even_list, odd_list = func(l)

print(even_list, odd_list)

# Görev - 6 : : Aşağıda verilen listede mühendislik ve tıp fakülterinde dereceye giren öğrencilerin isimleri
# bulunmaktadır. Sırasıyla ilk üç öğrenci mühendislik fakültesinin başarı sırasını temsil ederken son üç öğrenci de
# tıp fakültesi öğrenci sırasına aittir. Enumarate kullanarak öğrenci derecelerini fakülte özelinde yazdırınız.

ogrenciler = ["Ali", "Veli", "Ayse", "Talat", "Zeynep", "Ece"]

for index, student in enumerate(ogrenciler, 1):
    if index < 4:
        print("Muhendislik Fakultesi", index, ".", "ogrenci", ":", student)
    else:
        print("Tip Fakultesi", index - 3, ".", "ogrenci", ":", student)



# Gorev - 7 : Aşağıda 3 adet liste verilmiştir. Listelerde sırası ile bir dersin kodu, kredisi ve kontenjan bilgileri yer
# almaktadır. Zip kullanarak ders bilgilerini bastırınız.


ders_kodu = ["CPM1005", "PSY10001", "HUK1005", "SEN2204"]
kredi = [3, 4, 2, 4]
kontenjan = [30, 75, 150, 25]


liste = list(zip(ders_kodu, kredi, kontenjan))

for eleman in liste:
    print("Kredisi", eleman[1], "olan", eleman[0], "kodlu dersin kontenjani", eleman[2], "kisidir.")


# Görev - 8: Aşağıda 2 adet set verilmiştir. Sizden istenilen eğer 1. küme 2. kümeyi kapsiyor ise ortak elemanlarını
# eğer kapsamıyor ise 2. kümenin 1. kümeden farkını yazdıracak fonksiyonu tanımlamanız beklenmektedir.

kume1 = set(["data", "python"])
kume2 = set(["data", "function", "qcut", "lambda", "python", "miuul"])

def set_function():
    if kume1.issuperset(kume2) == 1:
        print(kume1.intersection(kume2))
    else:
        print(kume2.difference(kume1))

set_function()






